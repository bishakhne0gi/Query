Find the top 3 products thats are most frequently bought together (purchased in the same transaction)
Output the name of prod #1, name opf the prod #2 and number of combinations in descending order

1. Table creation 

CREATE TABLE WALMART_TRANS (
	transaction_id INT,
  	product_id INT,
  	users_id INT,
  	transaction_date DATETIME
)

CREATE TABLE WALMART_PRODS (
  	product_id INT,
    product_name VARCHAR(255)
)



2. Insertion of tuples

INSERT INTO WALMART_TRANS (transaction_id, product_id, users_id, transaction_date) 
VALUES
(523152,222,746, '2022-03-06 12:00:00.000'), (523152,444,746, '2022-03-06 12:00:00.000'),(256234,222,311, '2022-03-06 12:00:00.000'),(256234,333,311, '2022-03-06 12:00:00.000'),(231574,111,234, '2022-03-06 12:00:00.000'),(231574,444,234, '2022-03-06 12:00:00.000'),(231574,222,234, '2022-03-06 12:00:00.000'),
(141415,333,235, '2022-03-06 12:00:00.000'),(137124,111,125, '2022-03-06 12:00:00.000'),(137124,444,125, '2022-03-06 12:00:00.000')


INSERT INTO WALMART_PRODS (product_id, product_name)
VALUES
(111, 'apple'),(222,'soya milk'), (333, 'instant oatmeal'), (444, 'banana'), (555, 'china seed')



3. Output of the WALMART_TRANS, in descending order based on FIRST column

SELECT * FROM WALMART_TRANS ORDER BY 1 DESC


4. Output of the WALMART_PRODS 

SELECT * FROM WALMART_PRODS


5. Inner Join Two Tables with the product_id and creating a Common Table Expression with the join.

WITH WALMART_TRANS_PROD AS (
	SELECT WT.transaction_id, WT.product_id, WT.users_id, WP.product_name FROM 
	WALMART_TRANS AS WT 
	INNER JOIN
  	WALMART_PRODS AS WP
	ON WT.product_id = WP.product_id
	
)

SELECT * FROM WALMART_TRANS_PROD


SQL Query Breakdown:
1. WITH WALMART_TRANS_PROD AS (...)
WITH: This keyword is used to define a Common Table Expression (CTE). A CTE is a temporary result set that you can reference within the main SELECT query. It is like a temporary table that only exists for the duration of the query.
WALMART_TRANS_PROD: This is the name given to the CTE. You can think of it as a virtual table that holds the results of the subquery enclosed in the parentheses.
AS: Firmly establishes the alias for the CTE, which is the result set of the subquery following it.
2. (SELECT WT.transaction_id, WT.product_id, WT.users_id, WP.product_name FROM ... )
SELECT ... FROM ...: This is the main query that retrieves specific columns from the WALMART_TRANS and WALMART_PRODS tables.
WT.transaction_id, WT.product_id, WT.users_id: These columns are selected from the WALMART_TRANS table. WT is an alias for WALMART_TRANS.
WP.product_name: This column is selected from the WALMART_PRODS table. WP is an alias for WALMART_PRODS.
3. FROM WALMART_TRANS AS WT
FROM: Specifies the table from which to retrieve data. In this case, the data is being retrieved from the WALMART_TRANS table.
WALMART_TRANS AS WT: This gives the WALMART_TRANS table an alias WT for ease of reference in the query. Instead of typing WALMART_TRANS repeatedly, you can just use WT.
4. INNER JOIN WALMART_PRODS AS WP
INNER JOIN: This keyword joins two tables based on a related column between them. An INNER JOIN only returns rows where there is a match in both tables.
WALMART_PRODS AS WP: This gives the WALMART_PRODS table an alias WP. Again, this is for easier reference.
5. ON WT.product_id = WP.product_id
ON: Specifies the condition for the join. It defines how the two tables are related.
WT.product_id = WP.product_id: This is the join condition. It indicates that the join should be made where the product_id in the WALMART_TRANS table matches the product_id in the WALMART_PRODS table.
6. SELECT * FROM WALMART_TRANS_PROD
SELECT *: This selects all columns from the result set.
FROM WALMART_TRANS_PROD: Refers to the CTE named WALMART_TRANS_PROD, which is the result set created by the query inside the CTE. Essentially, this command is retrieving and displaying all the data that was structured in the CTE.



6. Grouping the combination of the products with same transaction_id.

WITH WALMART_TRANS_PROD AS (
	SELECT 
	    WT.transaction_id, 
	    WT.product_id, 
	    WT.users_id, 
	    WP.product_name 
	FROM 
	    WALMART_TRANS AS WT 
	INNER JOIN 
	    WALMART_PRODS AS WP
	ON 
	    WT.product_id = WP.product_id
),
WALMART_ANS AS (
 	SELECT 
	    A.product_name AS prod_1, 
	    B.product_name AS prod_2, 
	    COUNT(1) AS sum 
	FROM 
	    WALMART_TRANS_PROD AS A 
	INNER JOIN 
	    WALMART_TRANS_PROD AS B
	ON 
	    A.transaction_id = B.transaction_id 
	    AND A.product_name < B.product_name
	GROUP BY 
	    A.product_name, 
	    B.product_name
)

SELECT * FROM WALMART_ANS;



1. AND A.product_name < B.product_name: This condition ensures that each pair of products is counted only once and not reversed (i.e., (prod_1, prod_2) is counted, but not (prod_2, prod_1)).

2. GROUP BY A.product_name, B.product_name: Groups the results by the combinations of prod_1 and prod_2 to count how often each pair appears together.



7. Giving the desired answer

SELECT prod_1, prod_2
FROM WALMART_ANS 
ORDER BY sum DESC
LIMIT 3
